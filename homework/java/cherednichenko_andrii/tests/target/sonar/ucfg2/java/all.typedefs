Ö
java.lang.ObjectJ
equals(Ljava/lang/Object;),java.lang.Object#equals(Ljava/lang/Object;)Z*

finalize()java.lang.Object#finalize()V&
notify()java.lang.Object#notify()V&
<init>()java.lang.Object#<init>()V;

toString()-java.lang.Object#toString()Ljava/lang/String;$
wait(J)java.lang.Object#wait(J)V&
wait(JI)java.lang.Object#wait(JI)V:

getClass(),java.lang.Object#getClass()Ljava/lang/Class;5
clone()*java.lang.Object#clone()Ljava/lang/Object;,
notifyAll()java.lang.Object#notifyAll()V"
wait()java.lang.Object#wait()V*

hashCode()java.lang.Object#hashCode()I¨
io.github.anuchek.Mainjava.lang.Object,
<init>() io.github.anuchek.Main#<init>()VN
main([Ljava/lang/String;)1io.github.anuchek.Main#main([Ljava/lang/String;)Vp
"io.github.anuchek.tests.TestRunnerjava.lang.Object8
<init>(),io.github.anuchek.tests.TestRunner#<init>()V¦
$io.github.anuchek.service.Calculatorjava.lang.Object:
<init>().io.github.anuchek.service.Calculator#<init>()V:
subs(II).io.github.anuchek.service.Calculator#subs(II)I8
sum(II)-io.github.anuchek.service.Calculator#sum(II)I:
mult(II).io.github.anuchek.service.Calculator#mult(II)Iz
'io.github.anuchek.tests.CalculatorTestsjava.lang.Object=
<init>()1io.github.anuchek.tests.CalculatorTests#<init>()V